import numpy as np
from astropy.cosmology import WMAP9 as cosmo
import lbg_forecast.priors as pr
import math
import matplotlib.pyplot as plt
from scipy.stats import truncnorm

def generate_sps_parameters(nsamples, prior_parameters, redshift_mass_prior_parameters):
    """Sample sps parameters given some prior parameters.

    :param nsamples: 
        Number of samples

    :param prior_parameters:
        Hyperparameters for model of shape (nhyperparameters,). These are 
        the rows returned by hyperparameters.sample_prior_parameters()
    
    :param redshift_mass_prior_parameters:
        Parameters relating to redshift and mass priors.
        Generated by calling priors.setup_redshift_and_mass_priors()
    
    :returns sps_parameters:
        (nsamples, nparams) shape array containing galaxy sps 
        parameters. Each column is a different parameter, so
        each row is a single galaxy source. 
    """

    #Unpack hyperparameters
    logzsol_mu, logzsol_sigma, dust1_mu, dust1_sigma, dust2_mu, \
    dust2_sigma, dust_index_mu, dust_index_sigma, igm_factor_mu, \
    igm_factor_sigma, gas_logu_mu, gas_logu_sigma, fagn_mu, \
    fagn_sigma, agn_tau_mu, agn_tau_sigma, nu_min, nu_max, \
    sig_min, sig_max = prior_parameters

    #Setup redshift and mass priors
    z_grid, logm_grid, priors, grid_params = redshift_mass_prior_parameters
    z_samples, m_samples = pr.sample_priors(z_grid, logm_grid, priors, grid_params, nsamples, plotting=False)

    sps_parameters = []

    #Redshift - zred
    redshift = z_samples
    sps_parameters.append(redshift)

    #Stellar Metallicity - logzsol
    logzsol_min = -2.5
    logzsol_max = 0.5
    logzsol = truncated_normal(logzsol_mu, logzsol_sigma, logzsol_min, logzsol_max, nsamples)
    sps_parameters.append(logzsol)

    #Dust parameter for attenuating young starlight - dust1
    dust1_min = 0.0
    dust1_max = 2.0
    dust1 = truncated_normal(dust1_mu, dust1_sigma, dust1_min, dust1_max, nsamples) 
    sps_parameters.append(dust1)

    #Diffuse dust parameter - dust2
    dust2_min = 0.0
    dust2_max = 4.0
    dust2 = truncated_normal(dust2_mu, dust2_sigma, dust2_min, dust2_max, nsamples) 
    sps_parameters.append(dust2)

    #Index of dust attenuation law - dust_index
    dust_index_min = -1.0
    dust_index_max = 0.4
    dust_index = truncated_normal(dust_index_mu, dust_index_sigma, dust_index_min, dust_index_max, nsamples) 
    sps_parameters.append(dust_index)

    #IGM dust attenuation fudge factor - igm_factor
    igm_factor_min = 0.0
    igm_factor_max = 2.0
    igm_factor = truncated_normal(igm_factor_mu, igm_factor_sigma, igm_factor_min, igm_factor_max, nsamples) 
    sps_parameters.append(igm_factor)

    #Gas ionisation parameter - gas_logu
    gas_logu_min = -4.0
    gas_logu_max = -1.0
    gas_logu = truncated_normal(gas_logu_mu, gas_logu_sigma, gas_logu_min, gas_logu_max, nsamples) 
    sps_parameters.append(gas_logu)

    #AGN fraction to luminosity - fagn
    fagn_min = -5.0
    fagn_max = 1.0
    fagn = truncated_normal(fagn_mu, fagn_sigma, fagn_min, fagn_max, nsamples) 
    sps_parameters.append(10**fagn)

    #Optical depth of AGN torus - agn_tau
    agn_tau_min = 5
    agn_tau_max = 150
    agn_tau = truncated_normal(agn_tau_mu, agn_tau_sigma, agn_tau_min, agn_tau_max, nsamples) 
    sps_parameters.append(agn_tau)
    
    #Student's t parameter for SFH - nu
    nu = np.ones(nsamples)*np.random.randint(nu_min, nu_max+1)
    sps_parameters.append(nu)

    #Student's t width for SFH - sig
    sig = np.ones(nsamples)*np.random.uniform(sig_min, sig_max)
    sps_parameters.append(sig)

    #Total stellar mass formed in solar masses - mass
    mass = 10**m_samples
    sps_parameters.append(mass)

    return np.transpose(np.array(sps_parameters))

def truncated_normal(mu, sigma, min, max, samples):
    """Samples truncated normal distribution from scipy
    """
    a, b = (min - mu) / sigma, (max - mu) / sigma
    return truncnorm.rvs(a, b, loc=mu, scale=sigma, size=samples)

def plot_galaxy_population(sps_parameters, rows=5, nbins=20):
    
    realisations = sps_parameters
    nparams = realisations.shape[1]

    names = np.array(["zred", "logzsol", "dust1", "dust2", "dust_index", 
                      "igm_factor", "gas_logu", "logfagn", "agn_tau",
                       "nu", "sig", "logmass"])
    
    if(len(names) != nparams):
        raise Exception("Number of parameters and parameter labels don't match")

    columns = math.ceil(nparams/rows)
    total_plots = nparams
    grid = rows*columns

    fig1, axes1 = plt.subplots(rows, columns, figsize=(20,20), sharex=False, sharey=False)

    i = 0
    j = 0
    plot_no = 0
    name_count = 0
    col = 0
    while(col < nparams):

        if(i > rows - 1):
            j+=1
            i=0

        if(plot_no > total_plots):
            axes1[i, j].set_axis_off()

        else:
            if(names[name_count] == "logmass" or names[name_count] == "logfagn"):
                axes1[i, j].hist(np.log10(realisations[:, col]), density = True, bins=nbins)
                axes1[i, j].set_xlabel(names[name_count])
                axes1[i, j].set_ylabel("$p(z)$")
            else:
                axes1[i, j].hist(realisations[:, col], density = True, bins=nbins)
                axes1[i, j].set_xlabel(names[name_count])
                axes1[i, j].set_ylabel("$p(z)$")
        i+=1
        plot_no += 1
        name_count += 1
        col += 1

    #clear blank figures
    no_empty_plots = grid - nparams
    i = 0
    while(i < no_empty_plots):
        axes1[rows - i - 1, columns - 1].set_axis_off()
        i+=1
