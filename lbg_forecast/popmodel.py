import numpy as np
from astropy.cosmology import WMAP9 as cosmo
import lbg_forecast.priors as pr
from scipy.stats import truncnorm

def generate_sps_parameters(nsamples, prior_params):
    """Sample sps parameters given some prior parameters.

    :param nsamples: 
        Number of samples
    
    :prior_params:
        Parameters relating to redshift and mass priors.
        Generated by calling pr.setup_redshift_and_mass_priors()
    
    :returns sps_parameters:
        A list where each element is a numpy array of shape 
        (nsamples,) which contains samples of a given
        sps parameters. The length of the list is the number
        of sps parameters
    """

    logzsol_mu, logzsol_sigma = -0.1, 0.1
    dust1_mu, dust1_sigma = 0.2, 0.5
    dust2_mu, dust2_sigma = 0.2, 0.5
    dust_index_mu, dust_index_sigma = -0.7, 0.4
    igm_factor_mu, igm_factor_sigma = 1.0, 0.5
    gas_logu_mu, gas_logu_sigma = -2.0, 0.5
    fagn_mu, fagn_sigma = -5.0, 1.0
    agn_tau_mu, agn_tau_sigma = 10, 5 

    #Setup redshift and mass priors
    z_grid, logm_grid, priors, grid_params = prior_params
    z_samples, m_samples = pr.sample_priors(z_grid, logm_grid, priors, grid_params, nsamples, plotting=False)
    
    #Ages of universe at different redshifts
    t_universe_grid = tuniv_grid(z_grid)    

    sps_parameters = []

    #Redshift - zred
    redshift = z_samples
    sps_parameters.append(redshift)

    #Age of the universe at given redshift - tage [Gyr] (derived from zred)
    tuniv = np.interp(z_samples, z_grid, t_universe_grid)
    tuniv = np.reshape(np.asarray(tuniv), (nsamples,))
    sps_parameters.append(tuniv)

    #Stellar Metallicity - logzsol
    logzsol_min = -2.5
    logzsol_max = 0.5
    logzsol = truncated_normal(logzsol_mu, logzsol_sigma, logzsol_min, logzsol_max, nsamples)
    sps_parameters.append(logzsol)

    #Dust parameter for attenuating young starlight - dust1
    dust1_min = 0.0
    dust1_max = 2.0
    dust1 = truncated_normal(dust1_mu, dust1_sigma, dust1_min, dust1_max, nsamples) 
    sps_parameters.append(dust1)

    #Diffuse dust parameter - dust2
    dust2_min = 0.0
    dust2_max = 4.0
    dust2 = truncated_normal(dust2_mu, dust2_sigma, dust2_min, dust2_max, nsamples) 
    sps_parameters.append(dust2)

    #Index of dust attenuation law - dust_index
    dust_index_min = -1.0
    dust_index_max = 0.4
    dust_index = truncated_normal(dust_index_mu, dust_index_sigma, dust_index_min, dust_index_max, nsamples) 
    sps_parameters.append(dust_index)

    #IGM dust attenuation fudge factor - igm_factor
    igm_factor_min = 0.0
    igm_factor_max = 2.0
    igm_factor = truncated_normal(igm_factor_mu, igm_factor_sigma, igm_factor_min, igm_factor_max, nsamples) 
    sps_parameters.append(igm_factor)

    #Gas ionisation parameter - gas_logu
    gas_logu_min = -4.0
    gas_logu_max = -1.0
    gas_logu = truncated_normal(gas_logu_mu, gas_logu_sigma, gas_logu_min, gas_logu_max, nsamples) 
    sps_parameters.append(gas_logu)

    #AGN fraction to luminosity - fagn
    fagn_min = -5
    fagn_max = 1
    fagn = truncated_normal(fagn_mu, fagn_sigma, fagn_min, fagn_max, nsamples) 
    sps_parameters.append(10**fagn)

    #Optical depth of AGN torus - agn_tau
    agn_tau_min = 5
    agn_tau_max = 150
    agn_tau = truncated_normal(agn_tau_mu, agn_tau_sigma, agn_tau_min, agn_tau_max, nsamples) 
    sps_parameters.append(agn_tau)
    
    #Student's t parameter for SFH - nu
    nu_min = 2
    nu_max = 10
    nu = np.random.randint(nu_min, nu_max+1, nsamples)
    sps_parameters.append(nu)

    #Student's t width for SFH - sig
    sig_min = 0.1
    sig_max = 1.0
    sig = np.random.uniform(sig_min, sig_max, nsamples)
    sps_parameters.append(sig)

    #Total stellar mass formed in solar masses - mass
    mass = 10**m_samples
    sps_parameters.append(mass)

    return sps_parameters

def truncated_normal(mu, sigma, min, max, samples):
    """Samples truncated normal distribution from scipy
    """
    a, b = (min - mu) / sigma, (max - mu) / sigma
    return truncnorm.rvs(a, b, loc=mu, scale=sigma, size=samples)

def tuniv_grid(zgrid):
    """Calculates age of the universe for each redshift
    inside zgrid using WMAP9 cosmology
    """
    tuniv = []
    for z in zgrid:
        tuniv.append(cosmo.age(z).value)

    return np.asarray(tuniv)